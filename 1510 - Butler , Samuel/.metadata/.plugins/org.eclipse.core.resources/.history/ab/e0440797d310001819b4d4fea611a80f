//This program simulates the game of Connect 4 
//
//Author: Samuel Butler
//		  EECS 1510
//Date:     February 11, 2018
import java.util.Scanner;
public class Connect4Game
{
	public static void main(String[] args) 
	  {
		//makes a string array to create the board and sends it to the 
		//method BoardPattern
		
	    String[][] board = BoardPattern();
	    boolean loop = true;
	    
	    //create a count to be able to allow it to take turns 
	    //dropping red or yellow disk
	    
	    int turn = 0;
	    
	    //sends the array to the method to be able to display it to the user
	    
	    printBoard(board);
	    while(loop)
	    {
	    	if(turn % 2 == 0)
	    		redTeam(board);
	    	else
	    		yellowTeam(board);
	    	turn++;
	    	printBoard(board);
	    	if (winner(board) != null)
	    	{
	    		if(winner(board) == "R")
	    		{
	    			System.out.print("Red Player Win's!!!");
	    		}
	    		else if(winner(board) == "Y")
	    		{
	    			System.out.print("Yellow Player Win's!!!");
	    		}
	    		else if(winner(board) == " ")
	    		{
	    			System.out.println("It's a Tie. Game over!");
	    		}
	    		
	     // if there is no winner then it sets loop to false and does everything 
	     //over again until there is a winner 
	    		
	    	loop = false;
	    	}
	    }
	  }
	public static String[][] BoardPattern() 
	  {
		 //Made the array 7 by 15 because the 15 columns includes the lines and spaces 
		 //in making the board
		
		 String[][] board = new String[7][15];
			 for (int i = 0;i < board.length; i++)
			   for (int j = 0; j <board[i].length; j++) 
			     {
				   
		 //made the if statement divide j by to so it would alternate weather or 
		 //not to put a space or vertical line
				   
			      if (j % 2 == 0)
			         board[i][j] ="|";
			      else 
			        {
			         board[i][j] = " ";
			        }
			      
		 //since the last line will be row 6 thats where we draw the line using dash lines 
			      
			      if (i==6) board[i][j]= "-";
			      }
			    return board;
	    }
	public static void printBoard(String[][] board) 
		{
		 //now this makes a loop so we can display the board by using system.out.print allowing 
		 //it to print the array instead of jut storing it in board
		System.out.println(" 0 1 2 3 4 5  6  ");
			    for (int i =0;i<board.length;i++) 
			    {
			      for (int j=0;j<board[i].length;j++) 
			      {
			        System.out.print(board[i][j]);
			      }
			      
		 //allows it to go to the next line
			      
			        System.out.println();
			    }
		}
	public static void redTeam(String[][] board)
		{
		boolean team = true;
		while(team)
			{
			System.out.print("Your Turn Red Player, choose a number between 0-6: ");
			Scanner input = new Scanner(System.in);
			
			//makes sure that the user enters a number and not a letter/character
			
			while(!input.hasNextInt()) 
			{
				System.out.println();
				System.out.print("Sorry must be a number between 0-6. Try again: ");
				input.next();
			}
		
		//in order to get the disk in the spot the user desires we must divide the input 
		//by 2 and then add 1 because the spaces are every other 
			
			int red =(2 * input.nextInt()) + 1;
			
		//has them re-enter a number if it is out of the range of 0-6
			
					if(red > 13 || red < 0)
					{
						System.out.println();
						System.out.println("Sorry must be a number between 0-6. Try again: ");
						System.out.println();
						team = true;
					}
					else
					{
						
		//Starts at row five and then the column the user picks, then the next time around 
		//decrements the number if they happen to pick the same column so it can go to the 
		//row above it
						for(int i = 5; i>=0; i--)
							if (board[i][red] == " ")
							{
								board[i][red] = "R";
								break;
							}
						team = false;
					}
			}
		}
	public static void yellowTeam(String[][] board)
	{
		boolean team2 = true;
		while(team2)
		{
		//Same concept as dropping the red disk but instead drops yellow disk
			
		System.out.print("Your Turn Yellow Player, Drop Disk between 0-6: ");
		Scanner input = new Scanner(System.in);
		
		//makes sure that the user enters a number and not a letter/character
		
		while(!input.hasNextInt()) 
		{
			System.out.println();
			System.out.print("Sorry must be a number between 0-6. Try again: ");
			input.next();
		}
		
		int yellow = 2 * (input.nextInt()) + 1;
		
		if(yellow > 13)
		{
			System.out.println();
			System.out.println("Sorry must be a number between 0-6. Try again: ");
			System.out.println();
			team2 = true;
		}
		else if(yellow <= 13)
			{
			for(int i = 5; i>=0; i--)
				if (board[i][yellow] == " ")
				{
				board[i][yellow] = "Y";
				break;
				}
			team2 = false;
			}
		}
	}
	public static String winner(String[][] board)
	{
  	      //this checks if the space is taken up from either a R or Y then checks if 
  	      //the letter in that box are the same letter as they are in the other boxes  
  	      //and if they are they return that letter and declare the winner.
		
		for (int i =0;i<6;i++) 
		{
		      for (int j=0;j<7;j+=2)
		      {
		    	  
		  //checks the horizontal rows
		    	  
		        if ((board[i][j+1] != " ")
		        && ( board[i][j+3] != " ")
		        && ( board[i][j+5] != " ")
		        && ( board[i][j+7] != " ")
		        && ((board[i][j+1] ==  board[i][j+3])
		        && ( board[i][j+3] ==  board[i][j+5])
		        && ( board[i][j+5] ==  board[i][j+7])))
		      return board[i][j+1]; 
		      }
		 } 
		    for (int i=1;i<15;i+=2) 
		    {
		      for (int j =0;j<2;j++) 
		      {
		    	  
		  //checks the vertical rows 
		    	  
		       if(( board[j][i] != " ")
		       && ( board[j+1][i] != " ")
		       && ( board[j+2][i] != " ")
		       && ( board[j+3][i] != " ")
		       && ((board[j][i] ==   board[j+1][i])
		       && ( board[j+1][i] == board[j+2][i])
		       && ( board[j+2][i] == board[j+3][i])))
		     return board[j][i]; 
		      } 
		    }
		 
		    for (int i=0;i<3;i++) 
		    {
		      for (int j=1;j<9;j+=2) 
		      {
		  
		   //checks the diagonal rows from the left 
		    	  
		       if(( board[i][j] != " ")
		       && ( board[i+1][j+2] != " ")
		       && ( board[i+2][j+4] != " ")
		       && ( board[i+3][j+6] != " ")
		       && ((board[i][j]     == board[i+1][j+2])
		       && ( board[i+1][j+2] == board[i+2][j+4])
		       && ( board[i+2][j+4] == board[i+3][j+6])))
		     return board[i][j]; 
		      } 
		    }
		 
		    for (int i=0;i<3;i++) 
		    {
		      for (int j=7;j<15;j+=2) 
		      {
		    	  
		  //checks the diagonal rows from the right 
		    	  
		      if(( board[i][j] != " ")
		      && ( board[i+1][j-2] != " ")
		      && ( board[i+2][j-4] != " ")
		      && ( board[i+3][j-6] != " ")
		      && ((board[i][j] ==     board[i+1][j-2])
		      && ( board[i+1][j-2] == board[i+2][j-4])
		      && ( board[i+2][j-4] == board[i+3][j-6])))
		    return board[i][j]; 
		      } 
		    }
		    
		    //if they 2 players get a tie it will send this back and 
		    //display game over and that they tied
		    
		      if(( board[0][1]    != " ")
		      && ( board[0][1+2]  != " ")
		 	  && ( board[0][1+4]  != " ")
		      && ( board[0][1+6]  != " ")
	  	      && ( board[0][1+8]  != " ")
		 	  && ( board[0][1+10] != " ")
		      && ( board[0][1+12] != " "))
		    {
		    return board[0][1+12];
		    }
		    return null;
	}
}
